{"version":3,"sources":["axios.js","components/Row.js","requests.js","components/Banner.js","components/NavBar.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","data","results","fetchData","className","map","movie","onClick","movieTrailer","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","name","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","NavBar","show","handleShow","window","addEventListener","scrollY","removeEventListener","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.63501d4f.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\n//!   base url to make requests to the movie database\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n})\r\n\r\nexport default instance","import React, { useEffect, useState } from 'react'\r\nimport axios from '../axios'\r\nimport './Row.css'\r\nimport YouTube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer'\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\n\r\nfunction Row({ title, fetchUrl, isLargeRow }) {\r\n    //!movies state\r\n    const [movies, setMovies] = useState([])\r\n    //?trailerUrl state\r\n    const [trailerUrl, setTrailerUrl] = useState(\"\")\r\n    //* A snippet of code which runs based on a specific condition/variable\r\n    useEffect(() => {\r\n        //* if [] , run once when the row loads &then don't run it again\r\n        async function fetchData() {\r\n            const request = await axios.get(fetchUrl)\r\n            //! this is how the request is generated -> https://api.themoviedb.org/3/discover/tv?api_key=${API_KEY}&with_networks=213\r\n            setMovies(request.data.results)\r\n            return request\r\n\r\n        }\r\n        fetchData()\r\n    }, [fetchUrl])\r\n\r\n    //?options for the youtube video trailers\r\n    const opts = {\r\n        height: \"390\",\r\n        width: \"50%\",\r\n        playerVars: {\r\n            autoplay: 1,\r\n        }\r\n    }\r\n    const handleClick = (movie) => {\r\n        if (trailerUrl) {\r\n            setTrailerUrl('')\r\n        } else {\r\n\r\n            movieTrailer(movie?.title || \"\")\r\n                .then(url => {\r\n                    const urlParams = new URLSearchParams(new URL(url).search)\r\n                    setTrailerUrl(urlParams.get('v'))\r\n                }).catch((error) => console.log(error))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"row\">\r\n            {/* //? title */}\r\n            <h2>{title}</h2>\r\n            <div className=\"row__posters\">\r\n                {/* //?several row__poster(s) */}\r\n\r\n                {movies.map(movie => (\r\n                    <img\r\n                        onClick={() => handleClick(movie)}\r\n                        className={`row__poster ${isLargeRow && \" row__posterLarge\"}`}\r\n                        key={movie.id}\r\n                        src={`${base_url}${isLargeRow ? movie.poster_path : movie.backdrop_path\r\n                            }`}\r\n                        alt={movie.name} />\r\n                ))}\r\n\r\n            </div>\r\n            {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Row\r\n","//api key from tmdb\r\nconst API_KEY = \"f3be645b2ec5e021c44c6e7547704f56\";\r\n\r\nconst requests = {\r\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US&page=1`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests","import React, { useState, useEffect } from 'react'\r\nimport axios from '../axios'\r\nimport requests from '../requests'\r\nimport './Banner.css'\r\n\r\nconst base_url = \"https://image.tmdb.org/t/p/original/\"\r\nfunction Banner() {\r\n\r\n    const [movie, setMovie] = useState([])\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const request = await axios.get(requests.fetchNetflixOriginals)\r\n            setMovie(request.data.results[Math.floor(Math.random() * request.data.results.length - 1)]);\r\n            return request\r\n        }\r\n        fetchData()\r\n    }, [])\r\n\r\n    const truncate = (str, n) => {\r\n        return str?.length > n ? str.substr(0, n - 1) + \"...\" : str\r\n    }\r\n\r\n    return (\r\n        <header className=\"banner\"\r\n            style={{\r\n                backgroundSize: \"cover\",\r\n                backgroundImage: `url(${base_url}${movie?.backdrop_path})`,\r\n                backgroundPosition: \"center center\"\r\n            }}>\r\n            {/* //!background Image */}\r\n            <div className=\"banner__contents\">\r\n                {/* //*title */}\r\n                <h1 className=\"banner__title\">\r\n                    {movie?.title || movie?.name || movie?.original_name}\r\n                </h1>\r\n                {/* //?div> 2 buttons */}\r\n                <div className=\"banner__buttons\">\r\n                    <button className=\"banner__button\">Play</button>\r\n                    <button className=\"banner__button\">My List</button>\r\n                </div>\r\n                {/* //!description */}\r\n                <h1 className=\"banner__description\">\r\n                    {truncate(movie?.overview, 150)}\r\n                </h1>\r\n            </div>\r\n            <div className=\"banner--fadeBottom\" />\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner\r\n","import React, { useEffect, useState } from 'react'\r\nimport './NavBar.css'\r\n\r\nfunction NavBar() {\r\n\r\n    const [show, handleShow] = useState(false)\r\n\r\n    //!add scroll listener to show the transition\r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", () => {\r\n            if (window.scrollY > 100)\r\n                handleShow(true)\r\n            else handleShow(false)\r\n        })\r\n        return () => {\r\n            window.removeEventListener(\"scroll\")\r\n        }\r\n    }, [])\r\n\r\n    return (\r\n        <div className={`nav ${show && \"nav__black\"}`}>\r\n            <img\r\n                className=\"nav__logo\"\r\n                src=\"https://upload.wikimedia.org/wikipedia/commons/0/08/Netflix_2015_logo.svg\"\r\n                alt=\"Netflix Logo\" />\r\n            <img\r\n                className=\"nav__avatar\"\r\n                src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n                alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","import React from 'react';\nimport './App.css';\nimport Row from './components/Row'\nimport Banner from './components/Banner'\nimport NavBar from './components/NavBar'\nimport requests from './requests'\n\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* //TODO: NavBar */}\n      <NavBar />\n      {/* //TODO: Banner */}\n      <Banner />\n      {/* //? Netflix originals */}\n      <Row title=\"NETFLIX originals\" fetchUrl={requests.fetchNetflixOriginals}\n        isLargeRow />\n      {/* //? Trending Now  */}\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\n      {/* //? Top Rated */}\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\n      {/* //? Action Movies */}\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\n      {/* //? Comedy movies */}\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\n      {/* //?Horror movies */}\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\n      {/* //?Romance Movies */}\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\n      {/* //?Documentaries */}\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}